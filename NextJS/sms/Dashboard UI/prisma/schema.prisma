generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url = env("DATABASE_URL")
}

model Admin {
    id          String  @id 
    username    String  @unique
}

model Student {
    id          String    @id 
    username    String    @unique
    name        String 
    surname     String
    email       String?   @unique
    phone       String?
    address     String
    img         String
    bloodType   String
    gender      userGender
    createdAt   DateTime   @default(now()) 
    parentId    String
    parent      Parent      @relation(fields: [parentId], references: [id])

    classId     Int
    class       Class      @relation(fields: [classId], references: [id])

    gradeId     Int
    grade       Grade      @relation(fields: [gradeId], references: [id])

    attendences Attendence[]
    results     Result[]


}

model Teacher {
    id          String    @id 
    username    String    @unique
    name        String 
    surname     String
    email       String?    @unique
    phone       String?     @unique
    address     String
    img         String
    bloodType   String
    gender      userGender
    createdAt   DateTime   @default(now()) 
    subjects    Subject[]
    lessons     Lesson[]
    classes     Class[]
    attendences Attendence[]

}

model Parent {
    id          String    @id 
    username    String    @unique
    name        String 
    surname     String
    email       String?     @unique
    phone       String     @unique
    address     String
    createdAt   DateTime   @default(now()) 
    students    Student[]
}

model Grade {
    id              Int     @id @default(autoincrement())
    level           Int     @unique

    students        Student[]
    classes         Class[]

}

model Class {
    id              Int     @id @default(autoincrement())
    name            String  @unique
    capcity         Int
    lessons         Lesson[]

    supervisorId    String?
    supervisor      Teacher? @relation(fields: [supervisorId], references: [id])

    
    gradeId     Int
    grade       Grade      @relation(fields: [gradeId], references: [id])

    student         Student[]
    announcements   Announcement[]
    events          Event[]
}

model Subject {
    id           Int     @id @default(autoincrement())
    name         String  @unique
    teachers     Teacher[]
    lessons      Lesson[]
}

model Lesson {
    id          Int     @id @default(autoincrement())
    name        String
    day         Day
    startTime   DateTime
    endTime     DateTime

    subjectId   Int
    subject     Subject     @relation(fields: [subjectId], references: [id])

    classId     Int
    class       Class       @relation(fields: [classId], references: [id])

    teacherId   String
    teacher     Teacher     @relation(fields: [teacherId], references: [id])

    exams       Exam[]
    assignments Assignment[]
    attendences Attendence[]
}

model Exam {
    id          Int     @id @default(autoincrement())
    title   String
    startTime   DateTime
    endTime     DateTime

    lessonId    Int
    lesson      Lesson  @relation(fields: [lessonId], references: [id])

    results     Result[]
}

model Assignment {
    id          Int     @id @default(autoincrement())
    title   String
    
    lessonId    Int
    lesson      Lesson  @relation(fields: [lessonId], references: [id])
    
    startDate   DateTime
    dueDate     DateTime

    results     Result[]
}

model Result {
    id          Int     @id @default(autoincrement())
    score       Int

    examId      Int?
    exam        Exam?    @relation(fields: [examId], references: [id])

    assignmentId      Int?
    assignment        Assignment?    @relation(fields: [assignmentId], references: [id])

    studentId      String
    student        Student    @relation(fields: [studentId], references: [id])
}

model Attendence {
    id          Int     @id @default(autoincrement())
    date        DateTime
    present      Boolean

    studentId   String
    student     Student @relation(fields: [studentId], references: [id])
 
    lessonId   Int
    lesson     Lesson @relation(fields: [lessonId], references: [id])

    teacherId   String
    teacher     Teacher @relation(fields: [teacherId], references: [id])

}

model Event {
    id          Int     @id @default(autoincrement())
    title   String
    description     String

    startTime   DateTime
    endTime     DateTime

    classId     Int?
    class       Class?   @relation(fields: [classId], references: [id])
}

model Announcement {
    id      String      @unique
    title   String
    description     String
    date    DateTime

    classId     Int?
    class       Class?   @relation(fields: [classId], references: [id])
}

enum userGender {
    MALE
    FEMALE
}

enum Day {
    SUNDAY
    MONDAY
    TUESDAY
    WEDNESDAY
    THURSDAY
    FRIDAY
}